}
select_all_but_diag <- function(x) {
matrix(x[lower.tri(x, diag = F) | upper.tri(x, diag = F)],
nrow = nrow(x) - 1,
ncol = ncol(x))
}
getLies <- function(arr){
d = length(dim(arr))
if(d == 3){
apply(arr, MARGIN=d, FUN=select_all_but_diag)
} else{
select_all_but_diag(arr)
}
}
eval.s <- function(matr, ns){ #ns = 121 x 6 matrix of counts for all conditions
sum(log(matr)*ns)
}
eval.r <- function(matr, ns.T, ns.F){ #ns = 11 x 6 matrix of counts for all conditions
sum(log(matr)*ns.T + log(1-matr)*ns.F)
}
st = 1
end = 6
modelsEval = list(
# # # # # # # # # # #
# # recursive ToM # #
# # # # # # # # # # #
recurseToM = function(){
print("recursive ToM")
recurseToM.LL <- function(alph, eta.S, eta.R, lambda, weight){
ns.l = array(humanLieCounts, dim=c(11,11,1))
ns.T = humanDetectCounts.T
ns.F = humanDetectCounts.F
recurseToM.mat <- recurseToM.pred(alph, eta.S, eta.R, lambda, weight)
r.eval = -eval.r(recurseToM.mat[[1]][,st:end], ns.T[,st:end], ns.F[,st:end])
s.eval = -eval.s(recurseToM.mat[[2]][,,st:end], ns.l[,,st:end])
print(paste("alph =", alph, "; weight =", logitToProb(weight), "; lambda =", lambda, "; r =", r.eval, "; s =", s.eval))
neg.log.lik = r.eval + s.eval
neg.log.lik + weight^2 #+ weight^4 + lambda^4
}
recurseToM.fit <- summary(mle(recurseToM.LL,
start=list(alph=rnorm(1, 1, 0.2),
eta.S=rnorm(1, 0, 1),
eta.R=rnorm(1, 0, 1),
lambda=rnorm(1, 0, 1),
weight=rnorm(1, 0, 1)),
method = "BFGS"))
recurseToM.fit
}
)
st = 1
end = 1
modelsEval = list(
# # # # # # # # # # #
# # recursive ToM # #
# # # # # # # # # # #
recurseToM = function(){
print("recursive ToM")
recurseToM.LL <- function(alph, eta.S, eta.R, lambda, weight){
ns.l = array(humanLieCounts, dim=c(11,11,1))
ns.T = humanDetectCounts.T
ns.F = humanDetectCounts.F
recurseToM.mat <- recurseToM.pred(alph, eta.S, eta.R, lambda, weight)
r.eval = -eval.r(recurseToM.mat[[1]][,st:end], ns.T[,st:end], ns.F[,st:end])
s.eval = -eval.s(recurseToM.mat[[2]][,,st:end], ns.l[,,st:end])
print(paste("alph =", alph, "; weight =", logitToProb(weight), "; lambda =", lambda, "; r =", r.eval, "; s =", s.eval))
neg.log.lik = r.eval + s.eval
neg.log.lik + weight^2 #+ weight^4 + lambda^4
}
recurseToM.fit <- summary(mle(recurseToM.LL,
start=list(alph=rnorm(1, 1, 0.2),
eta.S=rnorm(1, 0, 1),
eta.R=rnorm(1, 0, 1),
lambda=rnorm(1, 0, 1),
weight=rnorm(1, 0, 1)),
method = "BFGS"))
recurseToM.fit
}
)
start_time <- Sys.time()
for(i in 1:50){
tryCatch({
recurseToMeval = modelsEval$recurseToM()
break
}, error = function(e){
message(e)
})
}
print(Sys.time() - start_time)
recurseToMeval
recurseToM.pred(
recurseToMeval@coef['alph','Estimate'],
recurseToMeval@coef['eta.S','Estimate'],
recurseToMeval@coef['eta.R','Estimate'],
recurseToMeval@coef['lambda','Estimate'],
recurseToMeval@coef['weight','Estimate'])[[2]][,,1] %>%
as_tibble() %>%
mutate(ksay = 0:10) %>%
pivot_longer(-ksay, names_to = 'k', values_to='probability') %>%
mutate(k = as.numeric(substr(k, 2, 10))-1,
probTxt = paste0(round(probability*100),"%")) %>%
ggplot(aes(x=k, y=ksay, fill=probability, label=probTxt)) +
geom_tile() +
geom_text(size=3) +
ggtitle("Recursive ToM (Optimized)") +
guides(fill = FALSE) +
scale_x_continuous("", expand=c(0,0)) +
scale_y_continuous("", expand=c(0,0)) +
scale_fill_gradient2(low="white", mid="darkorchid", high="blue", midpoint=0.5, limits=c(0,1))
ggsave("img/recursiveToM_prediction.png")
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]]
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble() %>%
mutate(ksay = 0:10) %>%
pivot_longer(-ksay, names_to = 'condition', values_to='probability') %>%
mutate(condition = as.numeric(substr(condition, 2, 10))-1,
expt = ifelse(condition < ceiling(max(condition)/2), "red", "blue"),
expt = factor(expt, levels=c("red","blue"))) %>%
mutate(p = rep(c(0.2, 0.5, 0.8), 22),
p = as.factor(p)) %>%
select(-condition) %>%
relocate(c(expt,p), .before = ksay) %>%
arrange(expt, p, ksay) %>%
ggplot(aes(x=ksay, y=probability, colour=p)) +
geom_point() +
geom_line() +
scale_colour_manual(values=my_red) +
facet_wrap(~expt) +
theme_minimal()
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble() %>%
mutate(ksay = 0:10) %>%
pivot_longer(-ksay, names_to = 'condition', values_to='probability') %>%
relocate(c(expt,p), .before = ksay) %>%
arrange(expt, p, ksay) %>%
ggplot(aes(x=ksay, y=probability, colour=p)) +
geom_point() +
geom_line() +
scale_colour_manual(values=my_red) +
facet_wrap(~expt) +
theme_minimal()
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble() %>%
mutate(ksay = 0:10) %>%
pivot_longer(-ksay, names_to = 'condition', values_to='probability') %>%
relocate(c(expt,p), .before = ksay) %>%
arrange(expt, p, ksay) %>%
ggplot(aes(x=ksay, y=probability)) +
geom_point() +
geom_line() +
theme_minimal()
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble()
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble() %>%
mutate(ksay = 0:10)
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble() %>%
mutate(ksay = 0:10) %>%
rename(probability = V1)
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[2]]
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
0,
0, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
0.1)[[1]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToMeval
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[1]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[1]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToMeval
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]]
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10)
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability')
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1)
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile(
)
recurseToM.pred(
0.5, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.5, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
3, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
7, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
7, #recurseToMeval@coef['lambda','Estimate'],
0.8)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
7, #recurseToMeval@coef['lambda','Estimate'],
1)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
7, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
recurseToM.pred(
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.3, #recurseToMeval@coef['lambda','Estimate'],
1.5)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
0.2, # recurseToMeval@coef['alph','Estimate'],
2,
10, #recurseToMeval@coef['eta.R','Estimate'],
0.3, #recurseToMeval@coef['lambda','Estimate'],
0.9)[[2]] %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
round(store.ksay.k[,,2],20) %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
n.depths = 40
store.ksay.k = array(NA, dim = c(11, 11, n.depths))
store.bs.ksay = array(NA, dim = c(11, n.depths))
prior = rep(0.1,11)
util = 1
eta.L = 1
eta.D = 1
alph = 0.5
for(depth in 1:n.depths){
if(depth == 1){
store.bs.ksay[,depth] = prior
} else if(depth == 2) {
store.bs.ksay[,depth] = mapply(p.D_bs.ksay.r,
0:10,
util,
alph,
eta.D,
lastlvl=depth==n.depths,
p_true.ksay(p.k(0:dieSides),
store.ksay.k[,,depth-1]))
} else {
store.bs.ksay[,depth] = mapply(p.D_bs.ksay.r,
0:10,
util,
alph,
eta.D,
lastlvl=depth==n.depths,
p_true.ksay(p.k(0:dieSides),
apply(store.ksay.k[,,1:(depth-1)], MARGIN = c(1, 2), FUN = mean)))
}
store.ksay.k[,,depth] = p.L_ksay.k.r(util,
alph,
eta.L,
lastlvl=depth==n.depths,
apply(matrix(store.bs.ksay[,1:depth], nrow=dieSides+1), MARGIN = 1, FUN = mean))
#store.bs.ksay[,depth])
}
round(store.ksay.k[,,2],20) %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0))
round(store.ksay.k[,,2],20) %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_fill_gradient2(low="white", mid="darkorchid", high="blue", midpoint=0.5, limits=c(0,1))
ggsave("img/recurseToM_prediction_notopt.png")
round(store.ksay.k[,,2],20) %>%
as_tibble() %>%
mutate(idx = 0:10) %>%
pivot_longer(-idx, names_to = 'column', values_to='probability') %>%
mutate(column = as.numeric(substr(column, 2, 10))-1) %>%
ggplot(aes(x=column, y=idx, fill=probability))+
geom_tile()+
scale_x_continuous("true roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_y_continuous("reported roll", breaks=seq(0,10,2), expand=c(0,0)) +
scale_fill_gradient2(low="white", mid="darkorchid", high="blue", midpoint=0.5, limits=c(0,1)) +
theme_bw()
ggsave("img/recurseToM_prediction_notopt.png")
sender %>%
count(trueRoll, reportedRoll) %>%
complete(trueRoll=0:10, reportedRoll=0:10, fill = list(n = 0)) %>%
group_by(trueRoll) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(x=trueRoll, y=reportedRoll, fill=prop)) +
geom_tile() +
scale_x_continuous("true roll", expand=c(0,0), breaks=seq(0,10,2)) +
scale_y_continuous("reported roll", expand=c(0,0), breaks=seq(0,10,2)) +
scale_fill_gradient2(low="white", mid="darkorchid", high="blue", midpoint=0.5, limits=c(0,1))
ggsave("img/true_vs_reported_tile.png")
